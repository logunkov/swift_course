// Базовые конструкции Swift

// Знакомство со Swift в playground. Переменные и константы
print("Знакомство со Swift в playground. Переменные и константы")
// Задача №1
print("задача №1")
/* Используя полученную вводную информацию, в файле .playground сделайте небольшое резюме о себе. Информация, которая должна быть в данном резюме:
1 Фамилия и имя.
2 Краткая информация о себе, в которую вы можете занести информацию о своих увлечениях и основных навыках - не более 5 строк.
3 Если есть опыт в работе с другими языками программирования, перечислите их.
4 Информация о инструментах (это может быть специальный софт или уникальное оборудование), с которыми умеете работать.
5 Опыт работы (по желанию).
6 Образование.
Информация должна содержать только текст, каждый пункт с новой строки. Подумайте, какой тип комментария лучше использовать для этого. */

// Иванов Иван
// В последнее время интересуюсь IT
// Есть небольшой опыт с Python
// Освоил Terminal
// Большой опыт работы с excel
// Образование Высшее

// Задача №2
print("\nзадача №2")
/*Продолжаем выполнять работу в этом же файле. У вас есть свое резюме, теперь создадим небольшую анкету с использованием переменных и констант. Анкета должна содержать следующую информацию, каждый пункт отдельная переменная или константа:
1 Имя.
2 Фамилия.
3 Возраст.
4 Пол.
5 Желаемый город релокации (переезд при трудоустройстве)
6 Опыт использования операционной системы macOS (Да/Нет)
7 Желаемая заработная плата.
8 Среднее количество дней отпуска, необходимое для комфортного отдыха.
9 Любимый цвет (в дальнейшем работодатель будет заказывать сувенирную продукцию и этот параметр будет учтен)
Помимо имени и значения необходимо указать тип данных, который больше всего подходит по вашему мнению для этого параметра, например:
let userSalary: Int = 100000

Примечание для новичков:
userName - присвоенное имя
Int - тип используемых данных
100000 - присвоенное значение */

let name: String = "Иван"
let surname: String = "Иванов"
var age: UInt8 = 34
let sex: String = "мужской"
var relocationCity: String = "Cupertino"
let experienceMacOS: String = "Да"
var desiredSalary: UInt = 1_000_000
var averageRestDays: UInt8 = 7
var favoriteСolor: String = "Сиреневый"

// Задача №3*
print("\nзадача №3*")
/*Решим арифметическую задачу. Каждые полгода идет пересчет заработной платы, исходя из достигнутых целей. Известны зарплаты трех сотрудников, у которых подходит время для пересчета:

Зарплата Middle iOS-разработчика – 150000
Зарплата Junior iOS-разработчика – 80000
Зарплата Middle Android-разработчика – 140000

По результатам шести месяцев работы Middle iOS-разработчик и Junior iOS-разработчик выполнили задачи поставленные руководителем мобильного направления и получили соответствующие изменения:

Зарплата Middle iOS-разработчика увеличилась в 1,2 раза
Зарплата Junior iOS-разработчик увеличилась на 20000
Зарплата Middle Android-разработчик осталась без изменений, так как не был достигнуты поставленные цели.

Реализуйте расчет новых сумм с помощью арифметических операций с присваиванием. Выведите новые суммы в консоль, каждую сумму с новой строки.

Алгоритм выполнения:
1 Объявите 3 переменные, которые будут определять зарплату подчиненных на разных должностях;
2 Придумайте соответствующее название переменных и инициализируйте их размером заработной платы;
3 Выполните математические действия, указанные в условии задачи;
4 Распечатайте полученный результат при помощи функции print(), каждый результат с новой строки. */

var salaryMiddleiOS: Float = 150_000
var salaryJunioriOS = 80_000
var salaryMiddleAndroid = 140_000

salaryMiddleiOS *= 1.2
salaryJunioriOS += 20_000

print(Int(salaryMiddleiOS))
print(salaryJunioriOS)
print(salaryMiddleAndroid)

// Логические типы. Преобразование типов. Условные конструкции
print("\nЛогические типы. Преобразование типов. Условные конструкции")
// Задача 1
print("задача №1")
/*Вы – начинающий разработчик. Отдел бухгалтерии попросил сделать программу, которая в зависимости от выбранного месяца показывает количество рабочих дней.
 Вводные данные: договоримся, что в каждом месяце всегда будет 8 выходных дней.
 Для конкретных месяцев есть следующие допущения по выходным:
 Январь дополнительно 8 выходных дней;
 Февраль - дополнительно 1 день;
 Март - дополнительно 1 день;
 Май - дополнительно 1 день;
 Июнь - дополнительно 1 день;
 Ноябрь - дополнительно 1 день.
Использование конструкции if.
Первое, что вы решили попробовать, – реализовать задание через конструкцию if else.
Алгоритм выполнения задания с использованием конструкции if
1. Создайте 12 констант. Каждая константа содержит имя одного из месяцев, имена месяцев в константе пишутся на английском языке. Результат можно писать на любом языке.
2. Создайте переменную selectedMonth, в нее вы будете передавать один из месяцев для проверки условия и выведения информации для бухгалтерии.
3. Создайте конструкцию if, которая будет проверять selectedMonth. В зависимости от того, какой месяц подставили в эту переменную, будет выводится информация о количестве рабочих дней в этом месяце.
Примечание: для того, чтобы проверить условие, можно воспользоваться оператором сравнения == (если selectedMonth содержит Январь, выводим информацию про этот месяц.)
Важно! Проверка if должна проверять все месяцы в одной конструкции.
У вас должна получиться одна конструкция содержащая варианты ответа для 12-и месяцев.
4. Ожидаемый результат – выведение в консоль информацию о количестве рабочих дней в месяце, например: В январе 16 рабочих дней */

let january = "January"
let february = "February"
let march = "March"
let april = "April"
let may = "May"
let june = "June"
let july = "July"
let august = "August"
let september = "September"
let october = "October"
let november = "November"
let december = "December"

var selectedMonth = "January"

if selectedMonth == january {
    print("В январе 16 рабочих дней")
} else if selectedMonth == february {
    print("В феврале 9 рабочих дней")
} else if selectedMonth == march {
    print("В марте 9 рабочих дней")
} else if selectedMonth == april {
    print("В апреле 8 рабочих дней")
} else if selectedMonth == may {
    print("В мае 9 рабочих дней")
} else if selectedMonth == june {
    print("В июне 9 рабочих дней")
} else if selectedMonth == july {
    print("В июле 8 рабочих дней")
} else if selectedMonth == august {
    print("В августе 8 рабочих дней")
} else if selectedMonth == september {
    print("В сентябре 8 рабочих дней")
} else if selectedMonth == october {
    print("В октябре 8 рабочих дней")
} else if selectedMonth == november {
    print("В ноябре 9 рабочих дней")
} else if selectedMonth == december {
    print("В декабре 8 рабочих дней")
} else {
    print("Введен не корректный месяц!")
}

// Задача 2
print("\nзадача №2")
/*Использование конструкции switch.
При реализации первого задания у вас получилась довольно большая конструкция. Увидев это, вы принимаете решение использовать конструкцию switch вместо if else для выполнения задания.
Алгоритм выполнения задания с использованием конструкции switch
1. У вас уже есть переменная, которая принимает месяц (selectedMonth) и 12 месяцев. Заново переменные создавать не нужно.
2. Создайте конструкцию switch. Проверяемый параметр – это selectedMonth. Конструкция switch должна содержать 12 кейсов, каждый кейс будет соответствовать своему месяцу.
Важно! Проверка switch должна обрабатывать все месяцы в одной конструкции.
Ожидаемый результат – выведение в консоль информацию о количестве рабочих дней в месяце.*/

switch selectedMonth {
    case january:
        print("В январе 16 рабочих дней")
    case february:
        print("В феврале 9 рабочих дней")
    case march:
        print("В марте 9 рабочих дней")
    case april:
        print("В апреле 8 рабочих дней")
    case may:
        print("В мае 9 рабочих дней")
    case june:
        print("В июне 9 рабочих дней")
    case july:
        print("В июле 8 рабочих дней")
    case august:
        print("В августе 8 рабочих дней")
    case september:
        print("В сентябре 8 рабочих дней")
    case october:
        print("В октябре 8 рабочих дней")
    case november:
        print("В ноябре 9 рабочих дней")
    case december:
        print("В декабре 8 рабочих дней")
    default:
        print("Введен не корректный месяц!")
}

// Задача 3
print("\nзадача №3")
/*Использование тернарного оператора.
Еще до сдачи работы вам пришел запрос от бухгалтерии на дополнительную разработку.
Вам необходимо в зависимости от того выходной или рабочий день выводить в консоль запись:
Это рабочий день или Это выходной день.
В бухгалтерской программе каждый день помечен свойством isHoliday - тип Bool. Необходимо выводить соответствующую запись, когда это свойство true и false.
Алгоритм выполнения задания с использованием тернарного оператора
1. Создайте переменную isHoliday и передайте в нее любое значение true или false.
2. Создайте простую конструкцию тернарного оператора, которая будет выводить на печать информацию, какой это день.
Ожидаемый результат – выведение в консоль информацию о типе дня.
Схематично это будет выглядеть так:
условие1 ? (вариант ответа1) : (вариант ответа2)*/

var isHoliday: Bool = true

isHoliday == true ? print("Это выходной день") : print("Это рабочий день")

//Задача 4*
print("\nзадача №4*")
/*Ваши первый и второй вариант задачи проверил руководитель и предложил 12 переменных вынести в перечисление (enum) и сделать вычисляемое свойство перечисления, используя конструкцию switch.
Алгоритм выполнения задания со звездочкой
После изучения дополнительного материала создайте перечисление, содержащее 12 кейсов с именами месяцев.
Создайте в теле перечисления вычисляемое свойство description, в котором будет происходить преобразование кейсов в String значения.
Распечатайте один любой месяц, используя перечисление.*/

// Вариант 1
enum month {
    case january, february, march, april, may, june, july, august, september, october, november, december
}

var selectMonth = month.january
var description: String {
    switch selectMonth {
        case .january:
            return "В январе 16 рабочих дней"
        case .february:
            return "В феврале 9 рабочих дней"
        case .march:
            return "В марте 9 рабочих дней"
        case .april:
            return "В апреле 8 рабочих дней"
        case .may:
            return "В мае 9 рабочих дней"
        case .june:
            return "В июне 9 рабочих дней"
        case .july:
            return "В июле 8 рабочих дней"
        case .august:
            return "В августе 8 рабочих дней"
        case .september:
            return "В сентябре 8 рабочих дней"
        case .october:
            return "В октябре 8 рабочих дней"
        case .november:
            return "В ноябре 9 рабочих дней"
        case .december:
            return "В декабре 8 рабочих дней"
 }
}
print(description)

// Вариант 2
enum month2: String {
    case january = "В январе 16 рабочих дней"
    case february = "В феврале 9 рабочих дней"
    case march = "В марте 9 рабочих дней"
    case april = "В апреле 8 рабочих дней"
    case may = "В мае 9 рабочих дней"
    case june = "В июне 9 рабочих дней"
    case july = "В июле 8 рабочих дней"
    case august = "В августе 8 рабочих дней"
    case september = "В сентябре 8 рабочих дней"
    case october = "В октябре 8 рабочих дней"
    case november = "В ноябре 9 рабочих дней"
    case december = "В декабре 8 рабочих дней"
}
var description2 = month2.january.rawValue
print(description2)

// Опциональные типы и преобразование
print("\nОпциональные типы и преобразование")
// Задача 1
print("задача №1")
/*Создайте три опциональные строковые переменные. Первые две проинициализируйте значениями, оставшуюся переменную проинициализируйте значением nil. При помощи nil-coalescing оператора выведите каждое значение в консоль с новой строки. Затем присвойте 3-й переменной значение и выведите его в консоль, используяnil-coalescingоператор. Есть ли разница между выводами в случае, когда переменная не имела значения и после присвоения.
Создать пять строковых констант. Одни константы это только цифры, другие содержат еще и буквы. Найти сумму всех этих констант приведя их к Int. (Используйте optional binding и forced unwrapping)*/

var string1 = Optional<String>("строка №1")
var string2 = String?("строка №2")
var string3: String?

print(string1 ?? "строка default")
print(string2 ?? "строка default")
print(string3 ?? "строка default")

string3 = "строка №3"

print(string1 ?? "строка default")
print(string2 ?? "строка default")
print(string3 ?? "строка default")

let str1 = "123"
let str2 = "123abc"
let str3 = "321"
let str4 = "a1b2c3"
let str5 = "1a2b3c"

var sum = 0

// forced unwrapping
if Int(str1) != nil {
    sum += Int(str1)!
}

// optional binding
if let tmp2 = Int(str2) {
  sum += tmp2
}
if let tmp3 = Int(str3) {
  sum += tmp3
}
if let tmp4 = Int(str4) {
  sum += tmp4
}
if let tmp5 = Int(str5) {
  sum += tmp5
}

print(sum)

// Задача 2
print("\nзадача №2")
/*Создайте опциональную константу с типом данных Optional<Int>. Проинициализируйте конструктором преобразования строки в целое числоInt(String). Вместо String впишите температуру за окном. При помощи конструкции if else выведите в консоль информационные сообщения, например для таких случаев, температура:
1 Больше нуля;
2 Меньше нуля;
3 Меньше -10 градусов;
4 Больше 10 градусов;
5 Нет значения (nil).
Например, если температура -25 градусов, можно вывести в консоль сообщение “Это что, Сибирь?”
Попробуйте подставить различные значения в конструктор, чтобы увидеть в консоли все сообщения.*/

let temperature: Int? = Int("20")

if temperature != nil {
    switch temperature! {
        case ...(-25):
            print("Это что, Сибирь?")
        case (-25)...(-10):
            print("Это что, Камчатка?")
        case (-10)...0:
            print("Это что, Урал?")
        case 0...10:
            print("Это что, Кавказ?")
        case 10...25:
            print("Это что, Крым?")
        case 25...:
            print("Это что, Сахара?")
        default: break
    }
} else {
    print("Указана не известная температура")
}

// Коллекции: массив
print("\nКоллекции: массив")
// Задача 1
print("задача №1")
/*Вы работаете над приложением “Электронный дневник”, ваша задача подготовить загрузку списков студентов в приложение и дальнейшую работу с данными.
Создайте массив с именами из 2 студентов мальчиков, затем создайте другой массив из 3 студенток девочек. После чего создайте 3 массив ‘students’ и присвойте ему значения массива с именами девочек. Затем при помощи цикла for добавьте в массив ‘students’ массив с именами мальчиков так, чтобы имена мальчиков оказались в начале обшего массива.
Алгоритм выполнения:
1 Создайте массивы;
3 При помощи цикла и функции insert объедините массивы так, чтобы имена мальчиков находились в начале массива.*/

let boysStudents = ["Harry", "Ron"]
let girlsStudents = ["Hermiony", "Gwen", "Juliet"]
var students = girlsStudents
for boy in boysStudents {
    students.insert(boy, at: 0)
}

// Задача 2
print("\nзадача №2")
/*Используя массив ‘students’ из первого задания, отсортируйте список студентов по алфавиту и выведите содержимое в консоль.
Для выполнения задания попрактикуйтесь с функцией sort().*/

students.sort()
print(students)

// Задача 3
print("\nзадача №3")
/*Вы работаете над фильтром товаров на главной странице магазина. Нужно показывать только товары с положительными оценками. Для этого вам потребуется обращаться к массиву с оценками и отбирать только положительные числа.
Алгоритм выполнения:
1 Создайте массив A из положительных и отрицательных чисел.
2 Отсортируйте массив A от большего к меньшему;
3 Отфильтруйте массив A таким образом, чтобы удалить все отрицательные значения.
Для выполнения задания используйте функцию filter для удаления.
Не забывайте, что названия переменных должны быть осмысленные и соответствовать стилю lowerCamelCase.*/

var productRating = [1, -2, 3, -4, 5, 6, -7, 8, -9]
productRating.sort(by: >)
var productRatingPlus = productRating.filter(){ $0 > 0 }

// Задача 4*
print("\nзадача №4*")
/*Дан массив [1, 2, 3, 4, 7, 8, 15]. Программно найдите индексы двух чисел, которые в сумме дают 6, и распечатайте их в консоль.
1 Проиницилизируйте переменные с индексами
2 Используя цикл решите задачу (рассмотрите возможность использования цикла в цикле).*/

var numbers = [1, 2, 3, 4, 7, 8, 15]
for (index1, value1) in numbers.enumerated() {
    for (index2, value2) in numbers.enumerated() {
        if value1 + value2 == 6 {
            print("Индексы двух чисел, которые в сумме дают 6: \(index1) и \(index2)")
        }
    }
}

// Словарь. Обход по коллекциям на примере for-in. Кортеж и множество
print("\nСловарь. Обход по коллекциям на примере for-in. Кортеж и множество")
// Задача 1
print("задача №1")
/*Работа с кортежами
Вы работаете над приложением “Информация о вас и ваших друзьях”. Ваша задача создать список людей с минимальной информацией о них и объединить одно из полей для создания общего значения.
Алгоритм выполнения
1 Создайте кортеж с тремя параметрами: ваш любимый фильм, ваше любимое число и ваше любимое блюдо. Все элементы кортежа должны быть именованы.
2 Одним выражением запишите каждый элемент кортежа в три константы.
3 Создайте второй кортеж, аналогичный первому по параметрам, но описывающий другого человека (с другими значениями).
4 Обменяйте значения в кортежах между собой (с использованием дополнительного промежуточного кортежа).
С5 оздайте новый кортеж, элементами которого будут любимое число из первого кортежа, любимое число из второго кортежа и разница любимых чисел первого и второго кортежей.*/

var harry = (favoriteMovie: "Harry Potter", favoriteNumber: 13, favoriteFood: "creamy beer")

let (movie, number, food) = harry

var ron = (favoriteMovie: "Urban Myths", favoriteNumber: 31, favoriteFood: "pumpkin biscuits")

let tmp = harry
harry = ron
ron = tmp

let harryRonFavoriteNumber = (harry.favoriteNumber, ron.favoriteNumber, harry.favoriteNumber - ron.favoriteNumber)

// Задача 2
print("\nзадача №2")
/*Представьте, что вы работаете над приложением электронный дневник. Создайте словарь, где ключом будет имя студента, а значением будет другой словарь из 3 элементов, содержащий название предмета и оценку.*/

let diary = ["harryPotter": ["Астрономия": 3, "Зельеварение": 4, "Травология": 3]]

// Задача 3
print("\nзадача №3")
/*Вы разрабатываете приложение “Шахматы”. Вашей задачей будет создать фигуру на игровом поле.
Алгоритм выполнения
1 Создайте псевдоним типа (typealias) Chessman для типа словаря [String: (alpha:Character, num: Int)?]. Данный тип описывает шахматную фигуру на игровом поле.
2 В ключе словаря должно храниться имя фигуры, например «Белый король», а в значении — кортеж, указывающий на координаты фигуры на игровом поле. Если вместо кортежа находится nil, это означает, что фигура убита (не имеет координат на игровом поле).
3 Создайте переменный словарь Chessmans типа Chessman и добавьте в него три произвольные фигуры, одна из которых не должна иметь координат.
4 Создайте конструкцию if-else, которая проверяет, убита ли переданная ей фигура (элемент словаря Chessmans), и выводит на консоль информацию либо о координатах фигуры, либо о ее отсутствии на игровом поле.
Подсказка
Для получения координат переданной фигуры используйте опциональное связывание.
// chessmans[key] - опциональное значение if let info = chessmans[key] { // Действие }*/

typealias chessman = [String: (alpha:Character, num: Int)?]
let chessmans: chessman = ["blackBishop":("a",1), "blackKnight":("b",2), "WhitePawn": nil]

if let info = chessmans.first?.value {
    let (x, y) = info
    print("Фигура жива, ее координаты: \(x)\(y) ")
} else {
    print("Фигура убита, ее нет на игровом поле")
}

// Задача 4*
print("\nзадача №4*")
/*Вам необходимо доработать программу из Задачи 3 таким образом, чтобы она автоматически анализировала не одну переданную ей фигуру, а все фигуры, хранящиеся в переменной Chessmans.*/

for chess in chessmans {
    if let info = chess.value {
        let (x, y) = info
        print("Фигура жива, ее координаты: \(x)\(y) ")
    } else {
        print("Фигура убита, ее нет на игровом поле")
    }
}

// Функции и области видимости
print("\nФункции и области видимости")
// Задача 1
print("задача №1")
/*В данной задаче вы тренируетесь добавлять и удалять значения в Хранилище (массив) при помощи двух функций, которые вам и нужно реализовать. Функции принимают значение, но ничего не возвращают. Первая функция добавляет элемент в массив, вторая функция удаляет элемент из массива, вы сами можете выбрать любой удобный для вас вариант добавления и удаления элементов из массива.
Алгоритм решения:
Создайте пустой массив строк типа String на любимую тематику, например, это будет Хранилище столовых приборов (этот пример не использовать), в который вы будете поочередно добавлять или удалять ложки, вилки и другие приборы.
Создайте 2 функции в соответствии с условием.
Попробуйте добавлять и удалять значения в массиве при помощи созданных функций.
Что произойдет, если попытаетесь удалить значение, которого нет в Хранилище? Напишите, что в этом случае вы можете изменить в своей функции и внесите в нее изменения.
Условие со звездочкой (необязательное для выполнения): обе функции должны принимать массив и значение. Они должны добавлять или удалять значения в массиве. Функция удаления должна быть безопасной, т.е. если Хранилище пустое, мы должны сообщить об этом пользователю, если запрашиваемое на удаление значение отсутствует, необходимо также сообщить, что такого элемента нет. Запрещается использование forced unwrapping, если в вашем варианте будет необходимость работать с опциональными значениями.*/

var playstationGames = [String]()

func addPlaystationGames (arrayGames: inout [String], game: String) -> Void {
    arrayGames.append(game)
    print("Игра \"\(game)\" добавлена в реестр игр playstation")
}

func deletePlaystationGames (arrayGames: inout [String], game: String) -> Void {
    if arrayGames.isEmpty {
        print("Реестр игр playstation - пуст!")
    } else {
        // Проверяем если ли игра в реестре игр playstation
        if let index = arrayGames.firstIndex(of: game) {
            arrayGames.remove(at: index)
            print("Игра \"\(game)\" удалена из реестра игр playstation")
        } else {
            print("Игры \"\(game)\" не было в реестре игр playstation!")
        }
    }
}
deletePlaystationGames(arrayGames: &playstationGames, game: "Uncharted 4")
addPlaystationGames(arrayGames: &playstationGames, game: "The Last of Us")
addPlaystationGames(arrayGames: &playstationGames, game: "Uncharted 4")
deletePlaystationGames(arrayGames: &playstationGames, game: "God of War 4")
deletePlaystationGames(arrayGames: &playstationGames, game: "Uncharted 4")

// Задача 2
print("\nзадача №2")
/*Вы получили тестовое задание от службы доставки еды: преобразовать бонусные баллы клиентов, которые хранятся на сайте, в денежные единицы. Со стороны сайта приходит словарь, содержащий ID клиента (Int) и накопленную сумму Бонусов (Double). Ваша задача вернуть на сайт словарь, содержащий ID клиента (Int) и конвертированные денежные единицы (Int), каждые 100 бонусов равны 10 денежным единицам.
Алгоритм решения:
Словарь со своими значениями создавать не нужно. Значения, с которыми вы будете работать, инкапсулированы и переданы в userPoints.
Распечатайте словарь и посмотрите, с какими значениями вы будете работать.
Создайте функцию, которая принимаем словарь, ключом которого будет тип Integer, значением число с плавающей точкой Double, вернуть необходимо словарь ключом и значением, которого будет Integer.
Вызовите функцию и распечатайте полученный результат.
Дополнительно (необязательно) входящих параметров может быть больше, например, для коэффициента пересчета баллов в денежные единицы.*/

let userPoints = [76: 2873.12, 31: 90.58, 95: 1000.59, 54: 3904.67, 9: 4661.12, 64: 4235.56, 21: 3119.0, 41: 3313.0, 78: 5829.48, 32: 1041.54, 93: 6114.78, 1: 2400.76, 33: 5796.09, 73: 115.55, 83: 4395.76, 59: 4800.34, 23: 183.76, 88: 5548.0, 60: 812.55, 51: 782.76, 25: 3518.0, 14: 5941.22, 26: 634.34, 3: 2970.87, 72: 35.5, 53: 2001.54, 91: 6455.0, 77: 6693.34, 47: 3868.0, 70: 3048.23, 22: 337.67, 37: 5116.45, 36: 6602.59, 69: 3495.0, 57: 4887.22, 16: 4966.0, 28: 4941.28, 2: 6099.0, 66: 3961.45, 15: 2333.34, 38: 1248.34, 71: 6863.56, 49: 3697.56, 58: 4021.34, 75: 2788.0, 6: 5489.34, 27: 4015.0, 7: 6420.87, 97: 733.0, 24: 3162.0, 29: 3251.68, 87: 1217.23, 5: 4647.34, 90: 1391.69, 85: 4130.56, 74: 828.0, 94: 4254.78, 96: 6938.45, 67: 2619.34, 100: 3433.78, 81: 575.0, 65: 5415.87, 35: 1850.0, 40: 2054.89, 62: 3804.0, 52: 558.0, 89: 4389.0, 12: 4719.65, 86: 5138.0, 8: 705.34, 50: 5988.89, 61: 5805.56, 48: 1805.89, 92: 1431.44, 4: 6567.55, 80: 6077.87, 68: 2912.98, 30: 3238.0, 84: 5014.49, 34: 5952.0, 46: 4978.87, 11: 4080.57, 45: 2392.98, 99: 5252.31, 63: 1269.23, 13: 196.0, 17: 3546.0, 20: 5342.56, 55: 2598.44, 56: 6149.0, 98: 6971.88, 79: 3456.0, 82: 2260.34, 43: 3519.46, 10: 2823.67, 39: 5915.56, 42: 568.0, 18: 2579.65, 44: 5349.45, 19: 5998.76]
print(userPoints)
let coefficient = 100.0 / 10.0

func convertPoints(users: [Int: Double], coefficient: Double = 100.0 / 10.0) -> [Int: Int] {

    var result = [Int: Int]()
    for user in users {
        result [user.key] = Int(user.value / coefficient)
    }

    return result
}

print(convertPoints(users: userPoints, coefficient: coefficient))
// Задача 3*
print("\nзадача №3*")
/*Вам необходимо реализовать функцию, которая принимаем массив опциональных значений типа Integer и возвращает кортеж, в который необходимо передать сумму четных и нечетных значений.
Массив может содержать повторяющиеся и nil значения, например: [1, 2, nil, 12, 1, nil, 3, 2].
В вычислении должны быть использованы только уникальные значения, а повторяющиеся учитываться не должны. Например, у нас повторяются числа 1 и 2, но попадать в результат они должны один раз; сумма нечетных будет (1 + 3 = 4), четных (2 + 12 = 14).
Так как в массиве могут быть nil, а вернуть необходимо не опциональное значение, необходимо использовать безопасное развертывание опционала (optional binding).
Для проверки вашего решения передайте в функцию подготовленный массив arrayOfNumbers.
Массив со своими значениями создавать не нужно. Значения, с которыми вы будете работать, инкапсулированы и переданы в arrayOfNumbers.
Распечатайте массив и посмотрите, с какими значениями вы будете работать.
Если вы все правильно сделаете, то получите ответ: сумма четных: 1378, нечетных: 1304.*/

let arrayOfNumbers = [70, 44, 97, 96, 99, 72, nil, 100, 40, 96, 1, 70, 77, 93, 25, 11, 89, 24, 50, 84, 81, 33, 95, 8, 22, 56, 24, 14, 4, 21, 14, 8, 59, 12, 81, 100, 8, 24, 4, 34, 17, 22, 54, 77, 87, nil, 1, 62, 33, 92, 66, 73, 51, 52, 25, 24, 20, 20, 13, 13, 51, 47, 8, 12, 53, nil, 13, 59, 98, 13, 13, 22, 10, 97, 88, 96, 24, 63, 12, 72, 47, 60, 51, 33, 35, 84, 79, 5, 89, 11, 46, 12, 13, nil, 22, 40, nil, 8, 14, 24]
print(arrayOfNumbers)

func calculateSumEvenOddValues(from array: [Int?]) -> (Int, Int) {
    var sunEvenNumbers = 0
    var sumOddNumbers = 0
    var numbers: Set <Int> = []

    for number in array {
        if let tmp = number {
            numbers.insert(tmp)
        }
    }

    for number in numbers {
        if number % 2 == 0 {
            sunEvenNumbers += number
        } else {
            sumOddNumbers += number
        }
    }

    return (sunEvenNumbers,sumOddNumbers)
}

// проверка решения Задача №3
let result = calculateSumEvenOddValues(from: arrayOfNumbers)

print("Сумма четных: \(result.0), нечетных: \(result.1)")

//Курсовой проект “Основы Swift”
print("\nКурсовой проект Основы Swift")
/*В качестве курсового проекта вы разработаете функцию для расчета времени пути на общественном транспорте.

В вашем городе появилась новая трамвайная ветка. Правительство города решило, что нужно добавить в мобильное приложение функционал по подсчету времени, затраченному на поездку, чтобы жители могли заранее планировать время. Ваша задача написать функцию, в которую будете передавать названия начальной и конечной остановки, и функция будет расчитывать время, затраченное на поездку.

Требования к коду

Код должен запускаться без ошибок;
Должен соблюдаться стиль кода;
Обратите внимание на названия переменных и функций. Названия должны быть говорящими, но ёмкими.
Алгоритм решения
Создайте коллекцию. Вид коллекции вы должны определить сами.
Наполните коллекцию данными. Названия остановок общественного транспорта (минимум 7) и время проезда между остановками (время задайте самостоятельно). Для упрощения можно указывать время проезда от первой остановки. То есть первая остановка - 0 минут, вторая остановка - 7 минут (0 + 7), третья остановка - 11 минут (7 + 4) и т.д.
Создайте функцию, которая будет принимать начальную и конечную остановку (тип string) и возвращать время, затраченное на поездку (тип Int).
Нужно учитывать, что остановки в функцию можно передавать в любом порядке. Например, начальная остановка - остановка 3, конечная остановка - остановка 8. Или начальная остановка - остановка 2, конечная остановка - остановка 6.
Подсказка:
можно комбинировать несколько коллекций, но коллекция должна быть одна. То есть нельзя использовать, например, два массива.
Нужно предусмотреть проверку названия остановок на наличие ошибок. В случае если название введено не верно, то выводить информацию об этом в консоль.
Алгоритм должен сам определять, в каком направлении двигается пассажир. Так как не все коллекции имеют упорядоченные значения, нужно пронумеровать порядок остановок на пути для облегчения решения задачи.*/

let tramStations = ["Заельцовская": 0, "Гагаринская": 5, "Красный проспект": 11, "Площадь Ленина": 18, "Октябрьская": 23,
                 "Речной вокзал": 29, "Спортивная": 36, "Студенческая": 41, "Площадь Маркса": 47]

let startStation = "Спортивная"
let endStation = "Площадь Ленина"

// упорядочить словарь с наименованием станций
var stations = [String]()
for time in tramStations.values.sorted() {
    for (station, foundTime) in tramStations {
        if time == foundTime {
            stations.append(station)
        }
    }
 }

// функция подсчета времени
func travelTimeCalculation(startStation: String, endStation: String) -> Int {
    var travelTime = 0

    if let startTime = tramStations[startStation], let endTime = tramStations[endStation] {
        travelTime = abs(startTime - endTime)
    }
  return travelTime
}

let travelTime = travelTimeCalculation(startStation: startStation, endStation: endStation)


if travelTime == 0 {
    print("Название станции указаны не верно. Начальная станция: \"\(startStation)\" - конечная станция: \"\(endStation)\"")
} else {
    var result = ""
    if let start = stations.firstIndex(of: startStation), let end = stations.firstIndex(of: endStation)  {
        if start < end {
            for tmp in start...end {
                result += stations[tmp]
                if tmp != end {
                    result += " -> "
                }
            }
        } else {
            for tmp in end...start {
                result = stations[tmp] + result
                if tmp != start {
                    result = " -> " + result
                }
            }
        }
    }
    print("Станции следования: \(result)")
    print("Время в пути составляет: \(travelTime) минут")
}
