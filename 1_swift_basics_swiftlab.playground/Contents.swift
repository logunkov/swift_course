// –û—Å–Ω–æ–≤—ã Swift.
// —É—Ä–æ–∫ 01 - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
print("—É—Ä–æ–∫ 01")
var currentAttemps = 1
let maximumNumberAttemps = 10

// —É—Ä–æ–∫ 02 - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
print("\n—É—Ä–æ–∫ 02")
// –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
/* –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */
/** —Å–ø—Ä–∞–≤–æ–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */

// —É—Ä–æ–∫ 03 - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–∏ÃÜ —Ç–æ—á–∫–æ–∏ÃÜ
print("\n—É—Ä–æ–∫ 03")
let minValue = UInt8.min
let maxValue = UInt8.max

// —É—Ä–æ–∫ 04 - —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
print("\n—É—Ä–æ–∫ 04")
let meaningOfLife = 42 // Int
let pi = 3.14159 // Double
let anotherPi = 3 + 0.14159 // Double

let decimalInt = 17
let binaryInt = 0b10001
let octalInt = 0o21
let hexInt = 0x11

let decimalDouble = 12.1875
let expDouble = 1.21875e1
let hexDouble = 0xC.3p0

let oneMillion = 1_000_000

// —É—Ä–æ–∫ 05 - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
print("\n—É—Ä–æ–∫ 05")
let twoThousand: UInt16 = 2000
let one: UInt8 = 1
let twoThousandOne = twoThousand + UInt16(one)

let three = 3
let pointOneFourOneFive = 0.14159
let numberPi = Double(three) + pointOneFourOneFive

// —É—Ä–æ–∫ 06 - –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–æ–≤ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã
print("\n—É—Ä–æ–∫ 06")
typealias AudioSample = UInt16
let maxValueAS = AudioSample.max

let isHide: Bool = false

// —É—Ä–æ–∫ 07 - –∫–æ—Ä—Ç–µ–∂–∏
print("\n—É—Ä–æ–∫ 07")
let http404Error = (404, "Not Found")

let (statusCode, statusMessage) = http404Error

let (justStatusCode, _) = http404Error
print("–¢–æ–ª—å–∫–æ –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: \(justStatusCode)")

print("–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: \(statusCode)")
print("–°–æ–æ–±—â–µ–Ω–∏–µ: \(statusMessage)")

print("–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: \(http404Error.0)")
print("–°–æ–æ–±—â–µ–Ω–∏–µ: \(http404Error.1)")

let http200Status = (statusCode: 200, description: "OK")
print("–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: \(http200Status.statusCode)")
print("–°–æ–æ–±—â–µ–Ω–∏–µ: \(http200Status.description)")

// —É—Ä–æ–∫ 08 - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è if
print("\n—É—Ä–æ–∫ 08")
var temperature = 32
if temperature <= 0 {
    print ("–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.")
} else if temperature >= 30 {
    print("–ù–∞ —É–ª–∏—Ü–µ —Ç–µ–ø–ª–æ. –û–¥–µ–≤–∞–π—Ç–µ —Ñ—É—Ç–±–æ–ª–∫—É.")
} else {
    print("–ù–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –Ω–æ –≤—Å–µ –∂–µ –Ω–∞–¥–µ–Ω—å—Ç–µ –∫—É—Ä—Ç–∫—É.")
}

// —É—Ä–æ–∫ 09 - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
print("\n—É—Ä–æ–∫ 09")
let possibleNumber = "123q"
let convertedNumber = Int(possibleNumber)

if let actualNumber = convertedNumber {
    print("possibleNumber —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = \(actualNumber)")
} else {
    print ("possibleNumber –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ")
}

// —É—Ä–æ–∫ 10 - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
print("\n—É—Ä–æ–∫ 10")
if let firstNumber = Int("4"), let secondNumber = Int("42"), firstNumber < secondNumber {
    print("\(firstNumber) < \(secondNumber) < 100")
}

// —É—Ä–æ–∫ 11 - –Ω–µ—è–≤–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—ã
print("\n—É—Ä–æ–∫ 11")
let possibleString: String? = "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"
let forcedString: String = possibleString!

var assumrdString: String! = "–ù–µ—è–≤–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –æ–ø—Ü–∏–æ–Ω–∞–ª"
let implictString: String = assumrdString

// —É—Ä–æ–∫ 12 - –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
print("\n—É—Ä–æ–∫ 12")
// -a, a!
// a ? b : c
// +, -, *, /, %

// —É—Ä–æ–∫ 13 - —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ nil
print("\n—É—Ä–æ–∫ 13")
let four = 4
let minusFour = -four

var a = 1
a += 2

// >, <, >=, <=, !=, ==

let defaultColor = "red"
var userDefineColor: String?
var colorToUse = userDefineColor ?? defaultColor

// —É—Ä–æ–∫ 14 - –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
print("\n—É—Ä–æ–∫ 14")
// !, &&, ||
let allowedEntry = false
if !allowedEntry {
    print("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
}

let entereDoorCode = true
let passedRetinaScan = true
if entereDoorCode && passedRetinaScan {
    print("Welcome!")
} else {
    print("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
}

let hasDoorKey = false
let adminPassword = false
if hasDoorKey || adminPassword {
    print("Welcome!")
} else {
    print("–î–æ—É—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
}

// —É—Ä–æ–∫ 15 - –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –ª–∏—Ç–µ—Ä—ã —Å—Ç—Ä–æ–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
print("\n—É—Ä–æ–∫ 15")
var multiLineStr = """
–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
    –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç 4 –ø—Ä–æ–±–µ–ª–∞
–≠—Ç–∞—Å —Å—Ç—Ä–æ–∫–∞ —Ç–∞–∫–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
"""
print(multiLineStr)

var str = "\' –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ\t\"—Å–∏–º–≤–æ–ª—ã\\\n–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"
print(str)
let dollarSign = "\u{24}"
let heart = "\u{1F496}"

var emptyString = ""
var anotherEmptyString = String()

if emptyString.isEmpty {
    print("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞!")
}
// —É—Ä–æ–∫ 16 - —Ä–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
print("\n—É—Ä–æ–∫ 16")
for character in "Dog!" {
    print(character)
}

let catCharacters: [Character] = ["C", "a", "t", "!"]
let catString = String(catCharacters)
print(catString)

let string1 = "hello"
let string2 = " world"
var welcome = string1 + string2
print(welcome)

welcome += "!"
print(welcome)

let exclamationMark: Character = "!"
welcome.append(exclamationMark)
print(welcome)

let multiplier = 3
let massage = "\(multiplier) time 2.5 \(Double(multiplier) * 2.5)"
print(massage)

// —É—Ä–æ–∫ 17 - –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫–∏
print("\n—É—Ä–æ–∫ 17")
let greeting = "Guten Tag!"
greeting[greeting.startIndex]
greeting[greeting.index(before: greeting.endIndex)]
greeting[greeting.index(after: greeting.startIndex)]
greeting[greeting.index(greeting.startIndex, offsetBy: 7)]

for index in greeting.indices {
    print(greeting[index], terminator: " ")
}
print()

var welcomeMessage = "hello"
welcomeMessage.insert("!",at: welcomeMessage.endIndex)

welcomeMessage.insert(contentsOf: " there", at: welcomeMessage.index(before: welcomeMessage.endIndex))
print(welcomeMessage)

welcomeMessage.remove(at: welcomeMessage.index(before: welcomeMessage.endIndex))
print(welcomeMessage)

let range = welcomeMessage.index(welcomeMessage.endIndex, offsetBy: -6)..<welcomeMessage.endIndex
welcomeMessage.removeSubrange(range)
print(welcomeMessage)

let greeting2 = "Hello, world!"
let ind = greeting2.firstIndex(of: ",") ?? greeting2.endIndex
let begining = greeting2[..<ind]
print(begining)

// —É—Ä–æ–∫ 18 - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
print("\n—É—Ä–æ–∫ 18")
let quotation = "–ú—ã –ø–æ—Ö–æ–∂–∏"
let SomeQuotation = "–ú—ã –ø–æ—Ö–æ–∂–∏"
if quotation == SomeQuotation {
    print("–≠—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã.")
}

let romeoAndJuliet = [
"Act 1 Scene 1: ",
"Act 1 Scene 2: ",
"Act 1 Scene 3: ",
"Act 1 Scene 4: ",
"Act 1 Scene 5: ",
"Act 2 Scene 1: ",
"Act 2 Scene 2: ",
"Act 2 Scene 3: ",
"Act 2 Scene 4: ",
"Act 2 Scene 5: ",
"Act 2 Scene 6: "
]

var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix("Act 1") {
        act1SceneCount += 1
    }
}
print("–í—Å–µ–≥–æ \(act1SceneCount) —Å—Ü–µ–Ω –≤ –ê–∫—Ç–µ 1")

// —É—Ä–æ–∫ 19 - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —é–Ω–∏–∫–æ–¥–∞
print("\n—É—Ä–æ–∫ 19")
let dogString = "Dog‚Üíüê∂"
dogString.count

for codeUnit in dogString.utf8 {
    print("\(codeUnit)", terminator: " ")
}
print()

for codeUnit in dogString.utf16 {
    print("\(codeUnit)", terminator: " ")
}
print()

for scalar in dogString.unicodeScalars {
    print("\(scalar.value)", terminator: " ")
}
print()

// —É—Ä–æ–∫ 20 - –º–∞—Å—Å–∏–≤—ã
print("\n—É—Ä–æ–∫ 20")
var someInts = [Int]()
someInts.append(3)
someInts.count

someInts = []

var threeDoubles = Array(repeating: 0.0, count: 3)
var anotherThreeDoubles = Array(repeating: 2.5, count: 3)
var sixDoubles = threeDoubles + anotherThreeDoubles

// —É—Ä–æ–∫ 21 - –¥–æ—Å—Ç—É–ø –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
print("\n—É—Ä–æ–∫ 21")
var shoppingList: [String] = ["—è–π—Ü–∞", "–º–æ–ª–æ–∫–æ"]

if shoppingList.isEmpty {
    print("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç")
} else {
    print("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π")
}

shoppingList.append("–º—É–∫–∞")
shoppingList.count

shoppingList += ["—Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å"]
shoppingList += ["—à–æ–∫–æ–ª–∞–¥", "—Å—ã—Ä", "–º–∞—Å–ª–æ"]
shoppingList.count

var firsItem = shoppingList[0]
shoppingList[0] = "—à–µ—Å—Ç—å —è–∏—Ü"

shoppingList[4...6] = ["–±–∞–Ω–∞–Ω—ã", "—è–±–ª–æ–∫–∏"]
shoppingList.insert("—Å–∏—Ä–æ–ø", at: 0)

let syrup = shoppingList.remove(at: 0)
let apples = shoppingList.removeLast()
shoppingList

// —É—Ä–æ–∫ 22 - –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –º–∞—Å—Å–∏–≤—É
print("\n—É—Ä–æ–∫ 22")
for item in shoppingList {
    print(item)
}

for (index, value) in shoppingList.enumerated() {
    print("\(index + 1). \(value)")
}
// —É—Ä–æ–∫ 23 - –º–Ω–æ–∂–µ—Å—Ç–≤–∞
print("\n—É—Ä–æ–∫ 23")
var favoriteGenres: Set = ["Rock", "Classical"]
favoriteGenres.insert("Hip hop")

// —É—Ä–æ–∫ 24 - –¥–æ—Å—Ç—É–ø –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
print("\n—É—Ä–æ–∫ 24")
if let removedGenre = favoriteGenres.remove("Rock") {
    print("–£–¥–∞–ª–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç \(removedGenre)")
} else {
    print("–¢–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç")
}

for genre in favoriteGenres {
    print(genre)
}

if favoriteGenres.contains("Funk") {
    print("–û! –î–∞ —è –≤—Å—Ç–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–æ–≥–∏!")
} else {
    print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ Funk'a —Ç—É—Ç")
}

for genre in favoriteGenres.sorted() {
    print(genre)
}

// —É—Ä–æ–∫ 25 - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
print("\n—É—Ä–æ–∫ 25")
let oddDigits: Set = [1, 3, 4, 7, 9]
let singlePrimeDigits: Set = [2, 3, 5, 7]

oddDigits.intersection(singlePrimeDigits)
oddDigits.symmetricDifference(singlePrimeDigits)
oddDigits.union(singlePrimeDigits)
oddDigits.subtracting(singlePrimeDigits)

let houseAnimals: Set = ["üê∂", "üê±"]
let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]
let cityAnimals: Set = ["üê≠", "üêß"]

houseAnimals.isSubset(of: farmAnimals)
farmAnimals.isSuperset(of: houseAnimals)
farmAnimals.isDisjoint(with: cityAnimals)

// —É—Ä–æ–∫ 26 - —Å–ª–æ–≤–∞—Ä–∏
print("\n—É—Ä–æ–∫ 26")
var nameOfIntegers = [Int: String]()
nameOfIntegers[16] = "sixteen"
nameOfIntegers = [:]

var airports = ["VYZ": "Toronto Pearson", "DUB": "Dublian"]
airports["LHR"] = "London"
airports["LHR"] = "london Heathrow"

if let oldValue = airports.updateValue("Dublin Airpor", forKey: "DUB") {
    print("–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ DUB –±—ã–ª–æ \(oldValue)")
}

airports["DUB"] = nil

if let airportName = airports["DUB"] {
    print("–ù–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ \(airportName)")
} else {
    print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ")
}

// —É—Ä–æ–∫ 27 - –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–≤–∞—Ä—é
print("\n—É—Ä–æ–∫ 27")
for (airportsCode, airportsName) in airports {
    print("\(airportsCode): \(airportsName)")
}

for airportsCode in airports.keys {
    print("–ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞: \(airportsCode)")
}

for airportsName in airports.values {
    print("–ù–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞: \(airportsName)")
}

let airportsCode = [String](airports.keys)
let airportsName = [String](airports.values)

// –û—Å–Ω–æ–≤—ã Swift. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º.
// —É—Ä–æ–∫ 28 - —Ü–∏–∫–ª for-in
print("\n—É—Ä–æ–∫ 28")
let names = ["Anna", "Alex", "Brain", "Jack"]
for name in names {
    print("Hello, \(name)")
}

let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
    print("\(animalName)s have \(legCount) legs")
}

for index in 1...5 {
    print("\(index) —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 5 –±—É–¥–µ—Ç: \(index * 5)")
}

let base = 3
let power = 10
var answer = 1
for _ in 1...power {
    answer *= base
}
print(answer)

// —É—Ä–æ–∫ 29 - –ø–æ–ª—É–∑–∞–º–∫–Ω—É—Ç—ã–∏ÃÜ –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
print("\n—É—Ä–æ–∫ 29")
let minutes = 60
for tickMark in 0..<minutes {
    print(tickMark)
}

let minuteInterval = 5
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {
    print(tickMark)
}

let hours = 12
let hourInterval = 3
for tickMark in stride(from: 3, through: hours, by: hourInterval) {
    print(tickMark)
}

// —É—Ä–æ–∫ 30 - —Ü–∏–∫–ª while
print("\n—É—Ä–æ–∫ 30")
let finalSquare = 25
var board = [Int](repeating: 0, count: finalSquare + 1)
board[3] = 8;       board[6] = 11;      board[9] = 9;   board[10] = 2;
board[14] = -10;    board[19] = -11;    board[22] = -2; board[24] = -8;

var square = 0
var diceRoll = 0

while square < finalSquare {
    //–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    diceRoll += 1
    if diceRoll == 7 {diceRoll = 1}
    // –¥–µ–ª–∞–µ–º —Ö–æ–¥
    square += diceRoll
    if square < board.count {
        square += board[square]
    }
    print(square)
}
print("Game Over!")

// —É—Ä–æ–∫ 31 - —Ü–∏–∫–ª repeat - while
print("\n—É—Ä–æ–∫ 31")
square = 0
diceRoll = 0
repeat {
    square += board[square]
    //–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    diceRoll += 1
    if diceRoll == 7 {diceRoll = 1}
    // –¥–µ–ª–∞–µ–º —Ö–æ–¥
    square += diceRoll
    print(square)
} while square < finalSquare
print("Game Over!")

// —É—Ä–æ–∫ 32 - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è switch
print("\n—É—Ä–æ–∫ 32")
let someChar: Character = "f"
switch someChar {
case "a":
    print("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞")
case "z":
    print("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞")
default:
    print("–≠—Ç–æ –¥—Ä—É–≥–∞—è –±—É–∫–≤–∞")

}

// —É—Ä–æ–∫ 33 - —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
print("\n—É—Ä–æ–∫ 33")
let yearsOld = 20
switch yearsOld {
case 0..<7:
    print("—Ä–µ–±–µ–Ω–æ–∫")
case 7..<17:
    print("—É—á–µ–Ω–∏–∫")
case 17..<22:
    print("—Å—Ç–¥–µ–Ω—Ç")
case 22..<65:
    print("—Ä–∞–±–æ—Ç–Ω–∏–∫")
default:
    print("–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä")
}

let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    print("\(somePoint) –≤ –Ω–∞—á–∞–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
case (_, 0):
    print("\(somePoint) –ª–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏ Y")
case (0, _):
    print("\(somePoint) –ª–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏ X")
case (-2...2, -2...2):
    print("\(somePoint) –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏")
default:
    print("\(somePoint) –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–±–ª–∞—Å—Ç–∏")
}

// —É—Ä–æ–∫ 34 - –ø—Ä–∏–≤—è–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ
print("\n—É—Ä–æ–∫ 34")
let anotherPoint = (2 ,0)
switch anotherPoint {
case (let x, 0):
    print("–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏ X –∏ –∑–Ω–∞—á–µ–Ω–∏–µ x = \(x)")
case (0, let y):
    print("–õ–µ–∂–∏—Ç –Ω–∞ –æ—Å–∏ Y –∏ –∑–Ω–∞—á–µ–Ω–∏–µ y = \(y)")
case (let x, let y):
    print("–õ–µ–∂–∏—Ç –≥–¥–µ-—Ç–æ –µ—â–µ (\(x), \(y)")
}

let yetAnotherPoint = (1, -1)
switch yetAnotherPoint {
case let (x, y) where x == y:
    print("\(x), \(y) –ª–µ–∂–∏—Ç –Ω–∞ –ø—Ä—è–º–æ–π x = y")
case let (x, y) where x == -y:
    print("\(x), \(y) –ª–µ–∂–∏—Ç –Ω–∞ –ø—Ä—è–º–æ–π x = -y")
case (let x, let y):
    print("–õ–µ–∂–∏—Ç –≥–¥–µ-—Ç–æ –µ—â–µ (\(x), \(y)")

}

// —É—Ä–æ–∫ 35 - —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∫–µ–∏ÃÜ—Å—ã
print("\n—É—Ä–æ–∫ 35")
let someCharacter: Character = "e"
switch someCharacter {
case "a", "e", "i", "o", "u":
    print("\(someCharacter) - –≥–ª–∞—Å–Ω–∞—è")
case "b", "c", "d", "f", "g":
    print("\(someCharacter) - —Å–æ–≥–ª–∞—Å–Ω–∞—è")
default:
    print("\(someCharacter) - –Ω–µ –±—É–∫–≤–∞")
}

let stillAnotherPoint = (9, 0)
switch stillAnotherPoint {
case (let distance, 0), (0, let distance):
    print("–õ–µ–∂–∏—Ç –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –æ—Å–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç \(distance)")
default:
    print("–¢–æ—á–∫–∞ –ª–µ–∂–∏—Ç –≥–¥–µ-—Ç–æ –µ—â–µ")
}

// —É—Ä–æ–∫ 36 - –æ–ø–µ—Ä–∞—Ç–æ—Ä continue
print("\n—É—Ä–æ–∫ 36")
let puzzleInput = "great minds think alike"
var puzzleOutput = ""
let charToRemove: [Character] = ["a", "e", "i", "o", "u", " "]

for char in puzzleInput {
    if charToRemove.contains(char) {
        continue
    }
    puzzleOutput.append(char)
}
print(puzzleOutput)

// —É—Ä–æ–∫ 37 - –æ–ø–µ—Ä–∞—Ç–æ—Ä break
print("\n—É—Ä–æ–∫ 37")
let numberSymbol: Character = "3"
var possibleInt: Int?
switch numberSymbol {
case "1":
    possibleInt = 1
case "2":
    possibleInt = 2
case "3":
    possibleInt = 3
case "4":
    possibleInt = 4
default:
    break
}
if let intValue = possibleInt {
    print("Integer value of \(numberSymbol) is \(intValue)")
} else {
    print("Integer value could not be found for \(numberSymbol)")
}

// —É—Ä–æ–∫ 38 - –æ–ø–µ—Ä–∞—Ç–æ—Ä fallthrough
print("\n—É—Ä–æ–∫ 38")
let intToDescrible = 5
var description = "The number \(intToDescrible) is"
switch intToDescrible {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime number, and also"
    fallthrough
default:
    description += " an integer"
}
print(description)

// —É—Ä–æ–∫ 39 - –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
print("\n—É—Ä–æ–∫ 39")
square = 0
diceRoll = 0

gameLoop: while square < finalSquare {
    //–±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
    diceRoll += 1
    if diceRoll == 7 {diceRoll = 1}
    // –¥–µ–ª–∞–µ–º —Ö–æ–¥
    switch square + diceRoll {
    case finalSquare:
        break gameLoop
    case let newSquare where newSquare > finalSquare:
        continue gameLoop
    default:
        square += diceRoll
        square += board[square]
    }
    if square < board.count {
        square += board[square]
    }
    print(square)
}
print("Game Over!")

// —É—Ä–æ–∫ 40 - —Ä–∞–Ω–Ω–∏–∏ÃÜ –≤—ã—Ö–æ–¥
print("\n—É—Ä–æ–∫ 40")
func greet(person: [String: String]) {
    guard let name = person["name"] else {
        return
    }
    print("–ü—Ä–∏–≤–µ—Ç, \(name)!")

    guard let location = person["location"] else {
        print("–ù–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ!")
        return
    }
    print("–ù–∞–¥–µ—é—Å—å –≤ \(location) —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞")
}

greet(person: ["name": "John"])
greet(person: ["name": "jane", "location": "Cupertino"])

// –û—Å–Ω–æ–≤—ã Swift. –§—É–Ω–∫—Ü–∏–∏.
// —É—Ä–æ–∫ 41 - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
print("\n—É—Ä–æ–∫ 41")
func greet(person: String) -> String {
    let greeting = "Hello, \(person)!"
    return greeting
}

print(greet(person: "Anna"))
print(greet(person: "Brain"))

// —É—Ä–æ–∫ 42 - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
print("\n—É—Ä–æ–∫ 42")
func sayHelloWorld() -> String {
    return "Hello, world!"
}

print(sayHelloWorld())

func greetAgain(person: String) -> String {
    let greeting = "Hello again, \(person)!"
    return greeting
}

func greet(person: String, alreadyGreeted: Bool) -> String {
    if alreadyGreeted {
        return greetAgain(person: person)
    } else {
        return greet(person: person)
    }
}

print(greet(person: "Tim", alreadyGreeted: true))

// —É—Ä–æ–∫ 43 - —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
print("\n—É—Ä–æ–∫ 43")
func greet2(person: String) {
    print("Hello, \(person)!")
}

greet2(person: "Dave")

func printAndCount(string: String) -> Int {
    print(string)
    return string.count
}

func printWithoutCounting(string: String) {
    let _ = printAndCount(string: string)
}

printAndCount(string: "Hello, world")
printWithoutCounting(string: "Hello, world!")

// —É—Ä–æ–∫ 44 - —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ
print("\n—É—Ä–æ–∫ 44")
func minMax(array: [Int]) ->(min: Int, max: Int)? {
    if array.isEmpty { return nil}

    var currentMin = array[0]
    var currentMax = array[0]

    for value in array[1..<array.count] {
        if value < currentMin {
            currentMin = value
        } else if value > currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
}

if let bounds = minMax(array: [1,2,3,4,40,-40]) {
    print("Min = \(bounds.min); Max = \(bounds.max)")
} else {
    print("Array is empty")
}
// —É—Ä–æ–∫ 45 - —è—Ä–ª—ã–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ÃÜ
print("\n—É—Ä–æ–∫ 45")
func greet(person: String, from homeTown: String) -> String {
    return "Hello \(person)! Glad you could visit from \(homeTown)."
}
print(greet(person: "Bill", from: "Cupertino"))

func greetPerson(_ person: String) -> String {
    let greeting = "Hello, \(person)!"
    return greeting
}

print(greetPerson("Alex"))

func multiplay(a: Int, b: Int = 5) -> Int {
    return a * b
}

multiplay(a: 5, b: 6)
multiplay(a: 3)

// —É—Ä–æ–∫ 46 - –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
print("\n—É—Ä–æ–∫ 46")
func arithmeticMean(_ numbers: Double...) -> Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}

arithmeticMean(1, 2, 3, 4, 5)
arithmeticMean(2, 5.25, 16.75)

// —É—Ä–æ–∫ 47 - —Å–∫–≤–æ–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
print("\n—É—Ä–æ–∫ 47")
func swapTwoInts (_ a: inout Int, _ b: inout Int) {
    let tempA = a
    a = b
    b = tempA
}

var someInt = 3
var anotherInt = 107
swapTwoInts(&someInt, &anotherInt)
print(someInt, anotherInt)

// —É—Ä–æ–∫ 48 - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
print("\n—É—Ä–æ–∫ 48")
func addTwoInts(a: Int, b: Int) -> Int {
    return a + b
}

func multiplyTwoInts(a: Int, b: Int) -> Int {
    return a * b
}

var mathFunction: (Int, Int) -> Int = multiplyTwoInts
print("–†–µ–∑—É–ª—å—Ç–∞—Ç: \(mathFunction(2, 3))")

// —É—Ä–æ–∫ 49 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
print("\n—É—Ä–æ–∫ 49")
func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç: \(mathFunction(a,b))")
}

printMathResult(multiplyTwoInts, 3, 5)

func stepForward(_ input: Int) -> Int {
    return input + 1
}

func stepBackward(_ input: Int) -> Int {
    return input - 1
}

func ChooseStepFunction(backward: Bool) -> (Int) -> Int {
    return backward ? stepBackward : stepForward
}

var currentValue = -4
let moveNearerToZero = ChooseStepFunction(backward: currentValue > 0)
print("–û—Ç—Å—á–µ—Ç –¥–æ –Ω—É–ª—è:")

while currentValue != 0 {
    print("\(currentValue)")
    currentValue = moveNearerToZero(currentValue)
}
print("Zero")

// —É—Ä–æ–∫ 50 - –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
print("\n—É—Ä–æ–∫ 50")
func ChooseStepFunction2(backward: Bool) -> (Int) -> Int {
    func stepForward(_ input: Int) -> Int {
        return input + 1
    }

    func stepBackward(_ input: Int) -> Int {
        return input - 1
    }

    return backward ? stepBackward : stepForward
}

currentValue = 4
let moveNearerToZero2 = ChooseStepFunction2(backward: currentValue > 0)
print("–û—Ç—Å—á–µ—Ç –¥–æ –Ω—É–ª—è:")

while currentValue != 0 {
    print("\(currentValue)")
    currentValue = moveNearerToZero2(currentValue)
}
print("Zero")

// —É—Ä–æ–∫ 51 - –∑–∞–º—ã–∫–∞–Ω–∏—è
print("\n—É—Ä–æ–∫ 51")
let namesStudent = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]

func bacward(_ s1: String, _ s2: String) -> Bool {
    return s1 > s2
}

var reversedNames = namesStudent.sorted(by: bacward)
reversedNames = namesStudent.sorted(by: { (s1: String, s2: String) -> Bool in
    return s1 > s2})

reversedNames = namesStudent.sorted(by: {s1, s2 in
    return s1 > s2})

reversedNames = namesStudent.sorted(by: {$0 > $1})
reversedNames = namesStudent.sorted(by: >)
print(reversedNames)

// —É—Ä–æ–∫ 52 - –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ
print("\n—É—Ä–æ–∫ 52")
reversedNames = namesStudent.sorted { $0 > $1 }
print(reversedNames)

let digitNames = [0: "Zero", 1: "One", 2: "Two", 3: "Three", 4: "Four",
                 5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"]

let numbers = [18, 63, 345]
let strings = numbers.map { (number) -> String in
    var number = number
    var output = ""
    repeat {
        output = digitNames[number % 10]! + output
        number /= 10
    } while number > 0
    return output
}
print(strings)

// —É—Ä–æ–∫ 53 - –∑–∞—Ö–≤–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ
print("\n—É—Ä–æ–∫ 53")
func makeIncrementer(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func increment() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return increment
}

let incrementByTen = makeIncrementer(forIncrement: 10)
incrementByTen()
incrementByTen()

let incrementBySeven = makeIncrementer(forIncrement: 7)
incrementBySeven()
incrementBySeven()

let alsoIncrementByTen = incrementByTen
alsoIncrementByTen()

// —É—Ä–æ–∫ 54 - —Å–±–µ–≥–∞—é—â–∏–µ –∑–∞–º—ã–∫–∞–Ω–∏—è
print("\n—É—Ä–æ–∫ 54")
var completionHandlers: [() -> Void] = []
func someFuncWithEscapingClosure(completionHandler: @escaping () -> Void) {
    completionHandlers.append(completionHandler)
}

func someFuncWithoutEscapingClosure(closure: () -> Void) {
    closure()
}

class SomeClass {
    var x = 10
    func doSomthing() {
        someFuncWithEscapingClosure {
            self.x = 100
        }
        someFuncWithoutEscapingClosure {
            x = 200
        }
    }
}

let instance = SomeClass()
instance.doSomthing()
print(instance.x)

completionHandlers.first?()
print(instance.x)

// —É—Ä–æ–∫ 55 - –∞–≤—Ç–æ–∑–∞–º—ã–∫–∞–Ω–∏—è
print("\n—É—Ä–æ–∫ 55")
var customerInLine = ["Chris", "Alex", "Ewa", "Barry", "Daniella"]
print(customerInLine.count)

let customerProvider = { customerInLine.remove(at: 0)}
print(customerInLine.count)

print("Now serving \(customerProvider())!")
print(customerInLine.count)

func serve(customer customerProvider: () -> String) {
    print("Now serving \(customerProvider())!")
}
serve(customer: {customerInLine.remove(at: 0)})
print(customerInLine.count)

func serve(customer customerProvider: @autoclosure () -> String) {
    print("Now serving \(customerProvider())!")
}
serve(customer: customerInLine.remove(at: 0))
print(customerInLine.count)

//–ó–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ –û—Å–Ω–æ–≤—ã Swift
//–ó–∞–¥–∞–Ω–∏–µ 1
print("\n–∑–∞–¥–∞–Ω–∏–µ 1")
//–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ R —á–µ—Ç–Ω—ã–º. –î–∞—Ç—å —Å–ª–æ–≤–µ—Å–Ω—ã–π –æ—Ç–≤–µ—Ç.
let checkNumber = 11
if checkNumber % 2 == 0 {
    print("\(checkNumber) - —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
} else {
    print("\(checkNumber) - –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
}
//–ó–∞–¥–∞–Ω–∏–µ 2
print("\n–∑–∞–¥–∞–Ω–∏–µ 2")
//–î–∞–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ A, B, C. –í—ã—è—Å–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –¥–ª–∏–Ω–∞–º–∏ —Å—Ç–æ—Ä–æ–Ω A, B, C.
let sideA = 10
let sideB = 10
let sideC = 14
if (sideA + sideB) > sideC && (sideA + sideC) > sideB && (sideB + sideC) > sideA {
    print("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
} else {
    print("–¢–∞–∫–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –ø—Ä–∏—Ä–æ–¥–µ")
}

//–ó–∞–¥–∞–Ω–∏–µ 3
print("\n–∑–∞–¥–∞–Ω–∏–µ 3")
//–î–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ 10 —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–π—Ç–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö. –ê —Ç–∞–∫–∂–µ —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
let arrayNumber = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]
var resultmMltiplication = 1
var resultSum = 0
var resultCount = 0

for tmp in arrayNumber {
    if tmp > 0 {
        resultmMltiplication *= tmp
    } else if tmp < 0 {
        resultSum += tmp
        resultCount += 1
    }
}
print("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª = \(resultmMltiplication)")
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª = \(resultCount) –∏ –∏—Ö —Å—É–º–º–∞ = \(resultSum)")

//–ó–∞–¥–∞–Ω–∏–µ 4
print("\n–∑–∞–¥–∞–Ω–∏–µ 4")
//–ò–∑ N —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤–µ, –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
let arrayNumberN = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]
var arrayNumberNMin = arrayNumberN[0]
var arrayNumberNMax = arrayNumberN[0]

for tmp in arrayNumberN {
    if tmp < arrayNumberNMin {
        arrayNumberNMin = tmp
    } else if tmp > arrayNumberNMax {
        arrayNumberNMax = tmp
    }
}
print("Max —á–∏—Å–ª–æ = \(arrayNumberNMax)")
print("Min —á–∏—Å–ª–æ = \(arrayNumberNMin)")

//–ó–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ –û—Å–Ω–æ–≤—ã Swift. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º.
//–ó–∞–¥–∞–Ω–∏–µ 5
print("\n–∑–∞–¥–∞–Ω–∏–µ 5")
//–ö–∞–∂–¥—ã–π –≥–æ–¥ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ 5%. –ù–∞–ø–∏—Å–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —É—Ä–æ–∂–∞–π —É–¥–≤–æ–∏—Ç—Å—è?
var productivity = 100.0
let productivityEnd = 2 * productivity
var resultYear = 0


while productivity <=  productivityEnd{
    productivity *= 1.05
    resultYear += 1
}
print("–£—Ä–æ–∂–∞–π —É–¥–≤–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ \(resultYear) –ª–µ—Ç ")

//–ó–∞–¥–∞–Ω–∏–µ 6
print("\n–∑–∞–¥–∞–Ω–∏–µ 6")
//–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ.
var resultNumberSimple = [Int]()
let numberSimple = 21
var isSimple: Bool
for tmp  in 2..<numberSimple {
    isSimple = true
    for tmp2 in 2..<tmp {
        if tmp % tmp2 == 0 {
            isSimple = false
            break
        }
    }
    if isSimple {
        resultNumberSimple.append(tmp)
    }
}
print("–≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –¥–æ \(numberSimple) : \(resultNumberSimple)")

//–ó–∞–¥–∞–Ω–∏–µ 7
print("\n–∑–∞–¥–∞–Ω–∏–µ 7")
//–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ ¬´–ø–µ—Ä–µ–≤–µ—Ä—Ç—ã—à–µ–º¬ª (–ø–æ—Ç–æ–ø, –∫–∞–∑–∞–∫). –í—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–µ—Å–Ω—ã–π –æ—Ç–≤–µ—Ç.
let text = "–∫–∞–∑–∞–∫"
let textCount = text.count / 2 - 1
var index1, index2: String.Index
var set1 = 0
for tmp in 0...textCount {
    index1 = text.index(before: text.index(text.endIndex, offsetBy: -tmp))
    index2 = text.index(before: text.index(text.startIndex, offsetBy: tmp + 1))
    if text[index1] != text[index2] {
        set1 = 1
        break
    }
}
if set1 == 0 {
    print("–°–ª–æ–≤–æ \"\(text)\" - –ø–µ—Ä–µ–≤–µ—Ä—Ç—ã—à")
} else {
    print("–°–ª–æ–≤–æ \"\(text)\" - –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä—Ç—ã—à")
}

//–ó–∞–¥–∞–Ω–∏–µ 8
print("\n–∑–∞–¥–∞–Ω–∏–µ 8")
//–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
//–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–∫–æ–±–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.
let bracketedText = "(a(b(c)d)e)f)"
var sumOpeningBracket = 0
var sumClosingBracket = 0

for tmp in bracketedText {
    if tmp == "(" {
        sumOpeningBracket += 1
    } else if tmp == ")" {
        sumClosingBracket += 1
    }
}

if sumOpeningBracket == sumClosingBracket {
    print("–ö–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–∫–æ–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–∫–æ–π")
} else {
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –Ω–µ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫")
}

//–ó–∞–¥–∞–Ω–∏–µ 9
print("\n–∑–∞–¥–∞–Ω–∏–µ 9")
//–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∏ —Ñ–∏–≥—É—Ä–Ω—ã—Ö –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
//–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–∫–æ–±–æ–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–∫–æ–±–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–∏–ø–æ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è —Å–∫–æ–±–∫–∏.
let bracketedTextAll = "(a{b[c]d}e)f)"
var sumOpeningBracketRound = 0
var sumClosingBracketRound = 0

var sumOpeningBracketCurly = 0
var sumClosingBracketCurly = 0

var sumOpeningBracketSquare = 0
var sumClosingBracketSquare = 0

for tmp in bracketedTextAll {
    switch tmp {
    case "(":
        sumOpeningBracketRound += 1
    case ")":
        sumClosingBracketRound += 1
    case "{":
        sumOpeningBracketCurly += 1
    case "}":
        sumClosingBracketCurly += 1
    case "[":
        sumOpeningBracketSquare += 1
    case "]":
        sumClosingBracketSquare += 1
    default:
        continue
    }
}

if sumOpeningBracketRound == sumClosingBracketRound && sumOpeningBracketCurly == sumClosingBracketCurly && sumOpeningBracketSquare == sumClosingBracketSquare {
    print("–ö–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Å–∫–æ–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–∫–æ–π")
} else {
    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –Ω–µ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫")
}

//–ó–∞–¥–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ –û—Å–Ω–æ–≤—ã Swift. –§—É–Ω–∫—Ü–∏–∏.
//–ó–∞–¥–∞–Ω–∏–µ 10
print("\n–∑–∞–¥–∞–Ω–∏–µ 10")
//–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Å–µ–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –≤–∞–º –º–µ—Ç–æ–¥–∞–º–∏.
var arrayNumb = [Int]()
for _ in 0...100 {
    arrayNumb.append(Int.random(in: 1...99))
}
print(arrayNumb)
arrayNumb.sort(by: >)
print(arrayNumb)
arrayNumb.sort(by: < )
print(arrayNumb)

//–ó–∞–¥–∞–Ω–∏–µ 11
print("\n–∑–∞–¥–∞–Ω–∏–µ 11")
//–ù–∞–ø–∏—Å–∞—Ç—å –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é –∏ –æ–±—Ä–∞—Ç–Ω–æ.
let NumberInt = 17
let NumberHex = 0x11
let arrayHex = [0: "0", 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F"]

func numberHex(_ number: Int) -> Void {
var number = number
var output = ""
    repeat {
        output = arrayHex[number % 16]! + output
        number /= 16
    } while number > 0
print("0x\(output)")
}

func numberInt(_ number: Int) -> Void {
    print(number)

}

numberHex(NumberInt)
numberInt(NumberHex)

//–ó–∞–¥–∞–Ω–∏–µ 12
print("\n–∑–∞–¥–∞–Ω–∏–µ 12")
/*–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∫—É—Ä—Å–æ–≤ –ø–æ —à–∞—Ö–º–∞—Ç–∞–º. –í–∞—à–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ—Å–µ—â–∞—é—Ç —Ç—Ä–∏ —É—á–µ–Ω–∏–∫–∞.
–°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –∏ –æ–± –∏—Ö —É—Å–ø–µ—Ö–∞—Ö. –ö–ª—é—á–æ–º —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ–∞–º–∏–ª–∏—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äî –¥—Ä—É–≥–æ–π —Å–ª–æ–≤–∞—Ä—å,
—Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –Ω–∞ —ç—Ç–æ–º –∑–∞–Ω—è—Ç–∏–∏ –æ—Ü–µ–Ω–∫—É.
–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å [String:[String:UInt]].
–í –≤–∞—à–µ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∂—É—Ä–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –¥–≤–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç—Ä–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤. –§–∞–º–∏–ª–∏–∏, –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –∏ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–∞–º–∏.
–ü–æ—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –≤—Å–µ–π –≥—Ä—É–ø–ø—ã —Ü–µ–ª–∏–∫–æ–º –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –≤—Å—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–æ–Ω—Å–æ–ª—å.*/

let chessPlayers = ["Harry": ["2022.10.01": 4, "2022.10.06": 5] ,
                    "Ron": ["2022.10.01": 3, "2022.10.06": 4],
                    "Hermione": ["2022.10.01": 5, "2022.10.06": 5]]
var averageMarkAll = 0
var marcCount = 0

for player in chessPlayers {
    var averageMark = 0
    for mark  in player.value {
        averageMark += mark.value
        averageMarkAll += mark.value
    }
    print("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞ \"\(player.key)\": \(Double(averageMark) / Double(player.value.count))")
    marcCount += player.value.count
}
let resultMark = (Double(averageMarkAll) / Double(marcCount) * 10).rounded() / 10
print("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: \(resultMark)")
